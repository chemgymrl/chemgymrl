'''
LabManager Engine

:title: manager_v1_engine.py

:author: Chris Beeler and Mitchell Shahen

:history: 2020-08-07
'''

import gym

class LabManagerEnv(gym.Env):
    '''
    Class to define the Lab Manager engine.
    '''

    def __init__(
            self,
            n_steps=100,
            environments=None,
            out_vessel_path=None
    ):
        '''
        Constructor class for the Lab Manager engine.

        Parameters
        ---------------
        `n_steps` : `int` (default=`100`)
            The number of time steps to be taken during each action.
        `environments` : `list` (default=`None`)
            A list of environments available to the lab manager.
        `out_vessel_path` : `str` (default=`None`)
            A string indicating the path to a vessel intended to be loaded into this module.

        Returns
        ---------------
        None

        Raises
        ---------------
        None
        '''

        self.n_steps = n_steps

        self.environments = environments

        self.current_env = None

        # access a MultiDiscrete of each submitted environment
        self.env_space = gym.spaces.MultiDiscrete([len(environments)])

        # obtain the action spaces for each environment
        action_spaces = []
        for env in environments:
            action_space = env.action_space
            action_spaces.append(action_space)

        # access an array containing the MultiDiscrete action space of each environment
        self.action_space_array = action_spaces

        # set up the done boolean
        self.done = False

        self.out_vessel_path = out_vessel_path

    def set_environment(self, env_index=0):
        '''
        Method to specify the environment to use.

        Parameters
        ---------------
        `env_index` : `int` (default=`0`)
            An integer indicating the position of the intended
            environment in the `environments` variables to use.

        Returns
        ---------------
        None

        Raises
        ---------------
        None
        '''

        self.current_env = self.environments[env_index]

    def reset(self):
        '''
        Method to reset each environment made available to the Lab Manager.

        Parameters
        ---------------
        None

        Returns
        ---------------
        None

        Raises
        ---------------
        None
        '''

        all_states = []

        for env in self.environments:
            state = env.reset()
            all_states.append(state)

        return all_states

    def step(self, action):
        '''
        Method to perform the `action` parameter on the current environment.

        Parameters
        ---------------
        `action` : `gym.spaces.MultiDiscrete`
            An object defining the action to perform on the current environment.

        Returns
        ---------------
        `state` : `np.array`
            An array containing updated values of all the thermodynamic variables,
            reactants, and spectra generated by the most recent step.
        `reward` : `float`
            The amount of the desired product that has been created in the most recent step.
        `done` : `boolean`
            Indicates if, upon completing the most recent step, all the required steps
            have been completed.
        `parameters` : `dict`
            Any additional parameters used/generated in the most recent step that need
            to be specified.

        Raises
        ---------------
        None
        '''

        env = self.current_env

        state, reward, done, params = env.step(action)

        return state, reward, done, params

    def render(self, model):
        '''
        Method to render the results of the action performed on the current environment.

        Parameters
        ---------------
        `model` : `str` (default=`human`)
            A string indicating the type of rendering to use.

        Returns
        ---------------
        None

        Raises
        ---------------
        None
        '''

        # obtain the current environment
        env = self.current_env

        # perform the render action of that environment;
        # note the plots are stored within the environment class
        env.render(model=model)
